---
AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: AWS SAM project an API for Control Tower

Parameters:
  Regions:
    Type: CommaDelimitedList
    Description: Regions to enable for Security Hub and GuardDuty
    Default: "us-east-1"

Globals:
  Function:
    Runtime: python3.8
    CodeUri: src/
    MemorySize: 128 # megabytes
    Timeout: 20 # seconds
    Tracing: Active
    Environment:
      Variables:
        POWERTOOLS_METRICS_NAMESPACE: ControlTowerAPI
        LOG_LEVEL: INFO

Resources:
  CreateAccountSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "Create Account API Key"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: token
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  CreateAccountLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateAccountFunction}"
      RetentionInDays: 7

  CreateAccountRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Policies:
        - PolicyName: CreateAccountPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "servicecatalog:ListPortfolios"
                  - "servicecatalog:SearchProducts"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "servicecatalog:DescribeProduct"
                  - "servicecatalog:ProvisionProduct"
                Resource: !Sub "arn:${AWS::Partition}:catalog:${AWS::Region}:${AWS::AccountId}:product/*"
              - Effect: Allow
                Action: "servicecatalog:AssociatePrincipalWithPortfolio"
                Resource: !Sub "arn:${AWS::Partition}:catalog:${AWS::Region}:${AWS::AccountId}:portfolio/*"
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:PutItem"
                Resource: !GetAtt AccountTable.Arn
              - Effect: Allow
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref CreateAccountSecret

  CreateAccountLogPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CreateAccountLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CreateAccountLogGroup}:log-stream:*"
      Roles:
        - !Ref CreateAccountRole

  CreateAccountRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CreateAccountRolePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "iam:GetRole"
            Resource: !GetAtt CreateAccountRole.Arn
      Roles:
        - !Ref CreateAccountRole

  # see https://docs.aws.amazon.com/controltower/latest/userguide/account-factory.html#automated-provisioning
  ControlTowerAccountFactoryPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: ControlTowerAccountFactoryPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSControlTowerAccountFactoryAccess
            Effect: Allow
            Action:
              - "sso:GetProfile"
              - "sso:CreateProfile"
              - "sso:UpdateProfile"
              - "sso:AssociateProfile"
              - "sso:CreateApplicationInstance"
              - "sso:GetSSOStatus"
              - "sso:GetTrust"
              - "sso:CreateTrust"
              - "sso:UpdateTrust"
              - "sso:GetPeregrineStatus"
              - "sso:GetApplicationInstance"
              - "sso:ListDirectoryAssociations"
              - "sso:ListPermissionSets"
              - "sso:GetPermissionSet"
              - "sso:ProvisionApplicationInstanceForAWSAccount"
              - "sso:ProvisionApplicationProfileForAWSAccountInstance"
              - "sso:ProvisionSAMLProvider"
              - "sso:ListProfileAssociations"
              - "sso-directory:ListMembersInGroup"
              - "sso-directory:AddMemberToGroup"
              - "sso-directory:SearchGroups"
              - "sso-directory:SearchGroupsWithGroupName"
              - "sso-directory:SearchUsers"
              - "sso-directory:CreateUser"
              - "sso-directory:DescribeGroups"
              - "sso-directory:DescribeDirectory"
              - "sso-directory:GetUserPoolInfo"
              - "controltower:CreateManagedAccount"
              - "controltower:DescribeManagedAccount"
              - "controltower:DeregisterManagedAccount"
              - "s3:GetObject"
              - "organizations:describeOrganization"
              - "sso:DescribeRegisteredRegions"
            Resource: "*"
      Roles:
        - !Ref CreateAccountRole

  CreateAccountFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Create Account Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: create_account
          LAMBDA_ROLE_ARN: !GetAtt CreateAccountRole.Arn
          ACCOUNT_TABLE: !Ref AccountTable
          SECRET_ID: !Ref CreateAccountSecret
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /v1/accounts
            Method: POST
      Handler: create_account.lambda_handler
      Layers:
        - !Ref DependencyLayer
      Role: !GetAtt CreateAccountRole.Arn

  AccountTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: account_name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: account_name
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  AccountStatusLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AccountStatusFunction}"
      RetentionInDays: 7

  AccountStatusRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Policies:
        - PolicyName: AccountStatusPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "servicecatalog:DescribeRecord"
                Resource: "*"
                Condition:
                  StringEquals:
                    "servicecatalog:accountLevel": "self"

  AccountStatusPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AccountStatusLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AccountStatusLogGroup}:log-stream:*"
      Roles:
        - !Ref AccountStatusRole

  AccountStatusFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Account Status Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: account_status
          SECRET_ID: !Ref CreateAccountSecret
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: "/v1/accounts/{recordId}"
            Method: GET
      Handler: account_status.lambda_handler
      Layers:
        - !Ref DependencyLayer
      Role: !GetAtt AccountStatusRole.Arn

  InvokeCallbackLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${InvokeCallbackFunction}"
      RetentionInDays: 7

  InvokeCallbackRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Policies:
        - PolicyName: InvokeCallbackPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt AccountTable.Arn

  InvokeCallbackPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${InvokeCallbackLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${InvokeCallbackLogGroup}:log-stream:*"
      Roles:
        - !Ref InvokeCallbackRole

  InvokeCallbackFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Invoke Callback Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: invoke_callback
          ACCOUNT_TABLE: !Ref AccountTable
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail.serviceEventDetails.createManagedAccountStatus"
            Pattern:
              source:
                - "aws.controltower"
              "detail-type":
                - "AWS Service Event via CloudTrail"
              detail:
                eventName:
                  - CreateManagedAccount
      Layers:
        - !Ref DependencyLayer
      Handler: invoke_callback.lambda_handler
      Role: !GetAtt InvokeCallbackRole.Arn

  OrganizationSetupLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OrganizationSetupFunction}"
      RetentionInDays: 7

  OrganizationSetupRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSOrganizationsFullAccess"
      Policies:
        - PolicyName: OrganizationSetupPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeRegions"
                  - "guardduty:EnableOrganizationAdminAccount"
                  - "macie2:EnableOrganizationAdminAccount"
                  - "ram:EnableSharingWithAwsOrganization"
                  - "servicecatalog:EnableAWSOrganizationsAccess"
                Resource: "*"

  OrganizationSetupPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${OrganizationSetupLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${OrganizationSetupLogGroup}:log-stream:*"
      Roles:
        - !Ref OrganizationSetupRole

  OrganizationSetupFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Description: Organization Setup Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: organization_setup
      Layers:
        - !Ref DependencyLayer
      Timeout: 30 # seconds
      Handler: organization_setup.lambda_handler
      Role: !GetAtt OrganizationSetupRole.Arn

  OrganizationSetup:
    Type: "Custom::OrganizationSetup"
    Properties:
      ServiceToken: !GetAtt OrganizationSetupFunction.Arn
      Regions: !Join [",", !Ref Regions]

  S3PublicBlockLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${S3PublicBlockFunction}"
      RetentionInDays: 7

  S3PublicBlockRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"

  S3PublicBlockPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${S3PublicBlockLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${S3PublicBlockLogGroup}:log-stream:*"
      Roles:
        - !Ref S3PublicBlockRole

  S3PublicBlockFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/s3_public_block
      Description: S3 Public Block Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: s3_public_block
      Layers:
        - !Ref DependencyLayer
      Handler: lambda_handler.handler
      Role: !GetAtt S3PublicBlockRole.Arn

  DeleteDefaultVpcLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteDefaultVpcFunction}"
      RetentionInDays: 7

  DeleteDefaultVpcRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Policies:
        - PolicyName: DeleteDefaultVpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ec2:DescribeRegions"
                Resource: "*"

  DeleteDefaultVpcPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${DeleteDefaultVpcLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${DeleteDefaultVpcLogGroup}:log-stream:*"
      Roles:
        - !Ref DeleteDefaultVpcRole

  DeleteDefaultVpcFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/delete_default_vpc
      Description: Delete Default VPC Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: delete_default_vpc
      Layers:
        - !Ref DependencyLayer
      Handler: lambda_handler.handler
      MemorySize: 1024 # megabytes
      Timeout: 300 # 5 minutes
      Role: !GetAtt DeleteDefaultVpcRole.Arn

  Route53QueryLogsLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Route53QueryLogsFunction}"
      RetentionInDays: 7

  Route53QueryLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"

  Route53QueryLogsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${Route53QueryLogsLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${Route53QueryLogsLogGroup}:log-stream:*"
      Roles:
        - !Ref Route53QueryLogsRole

  Route53QueryLogsFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/route53_query_logs
      Description: Route53 Query Logs Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: route53_query_logs
      Layers:
        - !Ref DependencyLayer
      Handler: lambda_handler.handler
      Role: !GetAtt Route53QueryLogsRole.Arn

  EnableSecurityHubLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${EnableSecurityHubFunction}"
      RetentionInDays: 7

  EnableSecurityHubRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess"
      Policies:
        - PolicyName: EnableSecurityHubPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeRegions"
                  - "organizations:DescribeAccount"
                  - "organizations:ListAccounts"
                Resource: "*"

  EnableSecurityHubPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: CloudWatchLogs
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${EnableSecurityHubLogGroup}"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${EnableSecurityHubLogGroup}:log-stream:*"
      Roles:
        - !Ref EnableSecurityHubRole

  EnableSecurityHubFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: functions/enable_security_hub
      Description: Enable Security Hub Lambda handler
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: enable_security_hub
          REGIONS: !Join [",", !Ref Regions]
      Layers:
        - !Ref DependencyLayer
      Handler: lambda_handler.handler
      MemorySize: 1024 # megabytes
      Timeout: 300 # 5 minutes
      Role: !GetAtt EnableSecurityHubRole.Arn

  ControlTowerAssumePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: ControlTowerAssumePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Resource: !Sub "arn:${AWS::Partition}:iam::*:role/AWSControlTowerExecution"
      Roles:
        - !Ref S3PublicBlockRole
        - !Ref DeleteDefaultVpcRole
        - !Ref Route53QueryLogsRole
        - !Ref EnableSecurityHubRole
        - !Ref OrganizationSetupRole

  DependencyLayer:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.8
      ContentUri: dependencies
      LicenseInfo: MIT
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.8

  StateMachine:
    Type: "AWS::Serverless::StateMachine"
    Properties:
      Definition:
        StartAt: ProvisionAccount
        States:
          ProvisionAccount:
            Type: Parallel
            End: true
            Branches:
              - StartAt: S3PublicBlock
                States:
                  S3PublicBlock:
                    Type: Task
                    Resource: !GetAtt S3PublicBlockFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - "Lambda.ServiceException"
                          - "Lambda.AWSLambdaException"
                          - "Lambda.SdkClientException"
                        IntervalSeconds: 2
                        MaxAttempts: 6
                        BackoffRate: 2
                    TimeoutSeconds: 20
                    End: true
              - StartAt: DeleteDefaultVpc
                States:
                  DeleteDefaultVpc:
                    Type: Task
                    Resource: !GetAtt DeleteDefaultVpcFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - "Lambda.ServiceException"
                          - "Lambda.AWSLambdaException"
                          - "Lambda.SdkClientException"
                        IntervalSeconds: 2
                        MaxAttempts: 6
                        BackoffRate: 2
                    TimeoutSeconds: 300 # 5 minutes
                    End: true
              - StartAt: Route53QueryLogs
                States:
                  Route53QueryLogs:
                    Type: Task
                    Resource: !GetAtt Route53QueryLogsFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - "Lambda.ServiceException"
                          - "Lambda.AWSLambdaException"
                          - "Lambda.SdkClientException"
                        IntervalSeconds: 2
                        MaxAttempts: 6
                        BackoffRate: 2
                    TimeoutSeconds: 300 # 5 minutes
                    End: true
              - StartAt: EnableSecurityHub
                States:
                  EnableSecurityHub:
                    Type: Task
                    Resource: !GetAtt EnableSecurityHubFunction.Arn
                    Retry:
                      - ErrorEquals:
                          - "Lambda.ServiceException"
                          - "Lambda.AWSLambdaException"
                          - "Lambda.SdkClientException"
                        IntervalSeconds: 2
                        MaxAttempts: 6
                        BackoffRate: 2
                    TimeoutSeconds: 300 # 5 minutes
                    End: true
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail.serviceEventDetails.createManagedAccountStatus"
            Pattern:
              source:
                - "aws.controltower"
              "detail-type":
                - "AWS Service Event via CloudTrail"
              detail:
                eventName:
                  - CreateManagedAccount
                serviceEventDetails:
                  createManagedAccountStatus:
                    state:
                      - SUCCEEDED
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: "lambda:InvokeFunction"
              Resource:
                - !GetAtt DeleteDefaultVpcFunction.Arn
                - !GetAtt S3PublicBlockFunction.Arn
                - !GetAtt Route53QueryLogsFunction.Arn
                - !GetAtt EnableSecurityHubFunction.Arn
      Type: STANDARD

Outputs:
  ApiUrl:
    Description: API endpoint URL
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
